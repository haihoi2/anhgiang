<?php
define('ANHGIANG_ACCESS', 'ANHGIANG_ACCESS');
define('ANHGIANG_FULLRIGHT_SID', 0);

function anhgiang_system_info_alter(&$info, $file, $type) {
  if ($type == 'module' && $file->name == 'profile') {
    $info['hidden'] = FALSE;
  }
}

/**
 * Implements hook_init().
 *
 */
function anhgiang_init() {
  global $user, $base_url;
  
  if ($user->uid > 0 && !user_access('access administration menu')) { // User logined
    drupal_add_css(drupal_get_path('module', 'anhgiang') . '/css/admin_menu.css');
    drupal_add_css(drupal_get_path('module', 'anhgiang') . '/css/admin_menu_toolbar.css');
    drupal_add_js(drupal_get_path('module', 'anhgiang') . '/js/admin_menu.js');
    drupal_add_js(drupal_get_path('module', 'anhgiang') . '/js/admin_menu_toolbar.js');
  
  }
  
}
/**
 * Implements hook_help().
 *
 * Displays help and module information.
 */
function anhgiang_help($path, $arg) {
  switch ($path) {
    case "admin/help#anhgiang":
      return '<p>' . t("Anh Giang website costum module") . '</p>';
      break;
  }
} 
/**
 * Implements hook_permission().
 */
function anhgiang_permission() {
  return array(
    'download anhgiang pages' => array(
      'title' => t('Download anhgiang pages and  articles'),
      'description' => t('Allow to download anhgiang pages and articles.'),
    ),
    'print anhgiang pages' => array(
      'title' => t('Print: pages and articles'),
      'description' => t('Can use print.css for pages.'),
    ),
    'download anhgiang media file' => array(
      'title' => t('Download media in pages and articles'),
      'description' => t('Download media in pages and articles.'),
    ),
  );
}
/**
 * Implements hook_node_access_records().
 */
function anhgiang_node_access_records($node) {

  $tree = workbench_access_get_active_tree();
  if (empty($tree['active'])) {
    return array();
  }
  
  // If disabled for this content type, do nothing.
  if (!is_object($node)) {
    $type = $node;
  }
  else {
    $type = $node->type;
  }
  if (!variable_get('workbench_access_node_type_' . $type, 1)) {
    return array();
  }
  
  if (!is_array($node->workbench_access)) {
    $node->workbench_access = array($node->workbench_access);
  }
  // build grant sections
  $sids = array();
  foreach($node->workbench_access as $tid) {  
    if ('project' != $tid) {
      if (array_key_exists($tid,$tree['active'])) {
        $sids[$tid] = $tid;
        while ($tree['tree'][$tid]['parent'] != $tid){
          $tid = $tree['tree'][$tid]['parent'];
          if ('project' != $tid) {
            if (array_key_exists($tid,$tree['active'])) {
              $sids[$tid] = $tid;
            }
          }
        }
      }
    }
  }
  $sids[ANHGIANG_FULLRIGHT_SID] = ANHGIANG_FULLRIGHT_SID; 
  if (empty($sids)) {
    return array();
  }
  foreach ($sids as $sid => $val) {
    $grants[] = array (
      'realm' => ANHGIANG_ACCESS,
      'gid' => $sid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }

  return !empty($grants) ? $grants : array();
}

/**
 * Implements hook_node_grants().
 */
function anhgiang_node_grants($account, $op) {
  // Now check the user account.
  if (!isset($account->workbench_access)) {
    $account = user_load($account->uid);
  }
  
  if (empty($account->workbench_access))
  {
    return array();
  }
  
  $sids = array_keys($account->workbench_access);
 
  foreach ($sids as $sid) {
    // determine if the user is a member of this section
    if ('project' == $sid) {
      $sid = ANHGIANG_FULLRIGHT_SID;        
    }
    $grants[ANHGIANG_ACCESS][$sid] = $sid;
  }

  return !empty($grants) ? $grants : array(); 
}
/**
 * Implements hook_node_form_alter().
 */
function anhgiang_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && $form['#node']->type .'_node_form' === $form_id) {
    // Is node form.
    
  }   
}

/**
 * Implements hook_menu().
 */
function anhgiang_menu() {
  $items = array();
  $items['page-404'] = array(
    'page callback' => 'anhgiang_page_not_found',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );
  $items['recent-msg'] = array(
    'page callback' => 'anhgiang_recent_msg',
    'access arguments' => array('access content'),
    'access callback' => true,
    'type' => MENU_CALLBACK,
  );

  return $items;
}
function anhgiang_recent_msg() {
  global $user;
  variable_set('recent_msg_user_' . $user->uid, '-1');  
  drupal_goto(url('user/' .$user->uid . '/workbench_access', array('absolute' => true)));
}
function anhgiang_page_not_found() {
  return '';
}

/**
 * helper function to get all translated nodeid.
 */
function anhgiang_get_translated_nids($nids = array(), $language = 'fr') {
  $tnids = array();
  foreach ($nids as $nid) {
    $node = node_load($nid);
    if ($node) {
      $translations = translation_node_get_translations($node->tnid);        
      if (isset($translations[$language])) {
        $tnids[] = $translations[$language]->nid;
      }
      elseif ($node->language == $language){
        $tnids[] = $node->nid;
      }
    }
  }
  return $tnids; 
}
 
 /**
 * Implements hook_insert().
 */
function anhgiang_node_insert($node) {
  $users = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->execute()
    ->fetchAll();
  $is_alert = false;
  switch ($node->type){
    case 'note':
      $is_alert = true;
      break;
    case 'task':
      $is_alert = true;
      break;
    case 'report':
      $is_alert = true;
      break;      
  }
  if ($is_alert) {
    foreach ($users as $user) {
    
      $full_user = user_load($user->uid); 
      $node->workbench_access = $node->field_project_section['und'][0]['tid'];
      $sids = anhgiang_node_access_records($node);
      $grants = anhgiang_node_grants($full_user, 'view');   
      
      $access = FALSE;
      if (array_key_exists(ANHGIANG_ACCESS,$grants)) {
        foreach ($sids as $sid){
          foreach ($grants[ANHGIANG_ACCESS] as $gid => $gvalue){
            if ($sid['realm']==ANHGIANG_ACCESS && $sid['gid'] == $gid)
              $access=true;
              break;
          }
        };
      }
      
      if ($access) {
        variable_set('recent_msg_user_' . $full_user->uid, $node->nid);
        watchdog('anhgiang', 'Create recent message for user: '. $full_user->name .'(' . $full_user->uid .') for node nid=' . $node->nid );
      }
    }
  }
  return '';
}

 /**
 * Implements hook_block_info().
 */
function anhgiang_block_info() {
  
  $blocks['recent_msg'] = array(
    'info' => t('Recent message for each user'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}
 /**
 * Implements hook_block_info().
 */
function anhgiang_block_configure($delta = ''){
  $form = array();
  if ($delta == 'recent_msg') {
    
  }
  return $form;
}

function anhgiang_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();
  global $user;
  switch ($delta) {
    case 'recent_msg':
      if (user_access('access content')) {
        $block['subject'] = t('Recent message');
        $msg = variable_get('recent_msg_user_' . $user->uid, '-1');
        if ($msg == '-1'){
          $block['content'] = '<ul><li style="display:none"> No message</li></ul>';
        }
        else {
          switch ($node->type){
            case 'note':
              $type = t('Thông báo');             
              break;
            case 'task':
              $type = t('Công việc');              
              break;
            case 'report':
              $type = t('Báo cáo');             
              break;      
          }
          $msg  = t('Có <a href="@url"> ' .  $type .' </a> mới!', array('@url' => url('recent-msg')));
          $block['content'] = '<ul><li>' . $msg . '</li></ul>';
        }
      }
      break;
  }
  return $block;
}